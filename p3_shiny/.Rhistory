shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
shiny::runApp()
runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tidyverse")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sample_n(by_year, 5)
avg_runtime
runApp()
avg_runtime
print(avg_runtime)
sample(by_year, n)
class(by_month)
count(by_month)
runApp()
runApp()
runApp()
runApp()
count(by_year)
View(by_year)
View(by_runtime)
View(by_keywords)
View(by_decade)
View(by_decade)
runApp()
View(by_decade)
View(by_decade)
View(by_keywords)
View(by_year)
View(by_year)
View(by_runtime)
View(by_genre)
View(by_certificates)
runApp()
print(max_year_all)
runApp()
# initialize upper and lower limit variables
min_year_all = 0
runApp()
runApp()
max_runtime_all = 453
runApp()
shiny::runApp()
View(number_films_per_decade)
runApp()
runApp()
runApp()
# function to get a count of movies from each decade as a table
number_films_per_decade = function(table) {
# create empty dataframe of each decade in range from calculated min to max
all_decades <- data.frame(formatC(1:((max_decade_all - min_decade_all) / 10 + 1), width = 2), 0)
names(all_decades)[1] <- "decade"
names(all_decades)[2] <- "count"
all_decades$decade <- seq(from = min_decade_all, to = max_decade_all, by = 10)
# INEFFICIENT NESTED LOOP, IDEALLY A GROUP_BY OR SOMETHING BETTER
# loop through each movie in given table
for (row in 1:as.numeric(count(table))) {
# get the current movie's decade it belongs to
curr_decade = floor(table$year[row] / 10) * 10
# loop through each decade
for (i in 1:as.numeric(count(all_decades))) {
# increment the decade count for found decade
if (curr_decade == all_decades$decade[i]) {
all_decades$count[i] <- all_decades$count[i] + 1
break
}
}
}
# output info
total_films = as.numeric(sum(all_decades$count))
print(paste0("---- total counted= ", total_films))
unique_decades = as.numeric(count(all_decades))
print(paste0("---- unique decades= ", unique_decades))
# return the table of counts per decade
all_decades
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
